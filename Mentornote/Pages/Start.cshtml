@page
@model Mentornote.Pages.Shared.StartModel
@{
    // Layout = "_Layout";
    Layout = "StartNav";
}
<div class="header">
    <div>
        <section>
            <h1>Welcome @Model.NewUser.FirstName</h1>
        </section>

        <button id="menu-btn" class="menu-btn">☰</button>
    </div>
</div>
<div class="startpagecont">
    <div class="fun-cards">

        <div class="fun-card">
            <div class="card-content">
                <p class="card-title">Study Notes</p>
                <h2>@Model.NotesList.Count</h2>
                <p class="card-word">Uploaded Notes</p>
            </div>
            <img class="card-icon"  src="https://img.icons8.com/?size=100&id=TWVL3qGCOW3R&format=png&color=000000" />
        </div>

        <div class="fun-card">
            <div class="card-content">
                <p class="card-title">FlashCards</p>
                <h2>@Model.FlashcardSets.Count()</h2>
                <p class="card-word">Generated Cards</p>
            </div>
            <img class="card-icon" src="https://img.icons8.com/?size=100&id=44268&format=png&color=000000" />
        </div>

        <div class="fun-card">
            <div class="card-content">
                <p class="card-title">Study Streak</p>
                <h2>7 days</h2>
                <p class="card-word">Practice exams</p>
            </div>
            <img class="card-icon" src="https://img.icons8.com/?size=100&id=58892&format=png&color=000000" />
        </div>
    </div>

    <div class="start-con-holder"> 
        <form name="Notesform" method="post" id="notesForm" class="notes-form">
            @Html.AntiForgeryToken() <!-- Required for Razor Pages -->
            <div class="notes-cards-container">
                <p class="cont-head">My Uploads</p>
                @foreach (var note in @Model.NotesList)
                {
                    <div class="note-card">
                        <div class="note-left">
                            <div class="icon-circle">
                                <img src="https://img.icons8.com/ios-filled/20/3b82f6/book.png" alt="Book Icon" />
                            </div>
                            <div class="note-text">
                                <strong>@note.Title</strong>
                            </div>
                        </div>

                        <div class="note-right">
                           @*  <a href="/Functionalities/FlashCards?flashcardSetId=@flashcardset.Id" class="tag note-tag">View Card</a> *@
                            <a href="/Preview?noteId=@note.Id" class="tag note-tag load-trigger">View Card</a>

                            <svg onmouseover="togglePopup(this)" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="black" viewBox="0 0 24 24" class="kebab-img">
                                <circle cx="12" cy="5" r="2" />
                                <circle cx="12" cy="12" r="2" />
                                <circle cx="12" cy="19" r="2" />
                            </svg>

                            <div class="popup-menu hidden">
                                <button type="button" name="Submit" id="editnotebtn"  value="Rename-@note.Id" class="popup-btn edit-note-btn">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="popup-icon" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                                        <path d="M4 21h4.586L20.293 9.293a1 1 0 0 0 0-1.414l-4.172-4.172a1 1 0 0 0-1.414 0L4 15.586V21zM5.414 17L15 7.414l1.586 1.586L7 18.586H5.414V17z" />
                                    </svg>
                                    Edit Title                    
                                </button>
                                <button type="button" name="Submit" value="Delete-@note.Id" class="popup-btn delete-note-btn">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="popup-icon" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                                        <path d="M6 7h12v13a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V7zm3 3v7h2v-7H9zm4 0v7h2v-7h-2z" />
                                        <path d="M18 4h-3.5l-1-1h-3l-1 1H6v2h12V4z" />
                                    </svg>
                                    Delete
                                </button>
                            </div>
                        </div>
                      
                    </div>

                }
                @if (Model.NotesList.Count == 0)
                {                 
                    <p class="empty-list">You have no Notes Yet Upload a File to Make Some!!</p>
                }
            </div>
        </form>
    </div>

    <div id="editModal" class="modal">
        <div class="modal-content">
            <h3>Edit Flashcard Set Title</h3>
            <form method="post" class="modal-form">
                @Html.AntiForgeryToken() <!-- Required for Razor Pages -->
                <input type="hidden" id="editSetId" name="SetId" />
                <input type="text" id="editNoteTitle" name="NewTitle" placeholder="Enter new title" required />
                <div class="modal-buttons">
                    <button type="submit" name="Submit" id="edit-confirm" class="confirm-btn modal-button" value="Edit">Save</button>
                    <button type="button" onclick="closeModal('editModal')" class="cancel-btn modal-button">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to delete this flashcard set?</h3>
            <form method="post" class="modal-form" onsubmit="submitDeleteForm(event)">
                @Html.AntiForgeryToken() <!-- Required for Razor Pages -->
                <input type="hidden" id="deleteSetId" name="SetId" />
                <div class="modal-buttons">
                    <button type="submit" name="Submit" value="Delete" id="delete-confirm" class="confirm-btn modal-button">Yup</button>
                    <button type="button" onclick="closeModal('deleteModal')" class="cancel-btn modal-button">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>

    // pop up effect
    // Toggle popup specific to clicked kebab icon
    function togglePopup(iconElement) {
        // Close all open popups
        document.querySelectorAll('.popup-menu').forEach(p => p.classList.add('hidden'));

        const popup = iconElement.nextElementSibling; // assumes popup is right after icon
        if (popup && popup.classList.contains('popup-menu')) {
            popup.classList.toggle('hidden');
        }
    }

    // Optional: close popup if user clicks outside
    document.addEventListener("click", function (e) {
        if (!e.target.closest(".notes-contols")) {
            document.querySelectorAll('.popup-menu').forEach(p => p.classList.add('hidden'));
        }
    });

    // Open and Close edit and Delete Controls

    let currentNoteId = null;
    let currentTitle = null;

    const editButtons   = document.querySelectorAll('.edit-note-btn');
    const deleteButtons = document.querySelectorAll('.delete-note-btn');
    const editconfim = document.getElementById('edit-confirm');
    const deleteconfim = document.getElementById('delete-confirm');
    const noteListForm = document.getElementById('notesForm');

    let currentNoteAction = null;

    // Handle every Edit button
    editButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        currentNoteAction = btn.value;              
        console.log("Edit clicked:", currentNoteAction);
        document.getElementById('editModal').style.display = 'block';
        editconfim.value = currentNoteAction;
      });
    });

    // Handle every Delete button
    deleteButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        currentNoteAction = btn.value;               
        console.log("Delete clicked:", currentNoteAction);
        document.getElementById('deleteModal').style.display = 'block';
        deleteconfim.value = currentNoteAction;
      });
    });

    function closeModal(modalId) {
      document.getElementById(modalId).style.display = 'none';
    }

</script>
